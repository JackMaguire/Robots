// g++ benchmark_recursion.cc -std=c++2a -o benchmark_recursion -Wall -pedantic -Wshadow
// g++ benchmark_recursion.cc -std=c++2a -o benchmark_recursion -Wall -pedantic -Wshadow -g -D_GLIBCXX_DEBUG

#include "robots.hh"
#include "recursion.hh"

#include <array>

#include <string>
//#include <fstream>
#include <stdio.h>
#include <iostream>
//#include <cstdlib> //rand()

#include <chrono>

/*int main(){

  bool any_cascade = false;

  for( int i = 0; i < 5; ++i ){
    RobotsGame< NullVisualizer, false, 0 > game( 1, 0 );
    auto result = recursive_search_for_cascade< 10 >( game.board() );
    any_cascade |= result.cascade;
  }
  
  std::cout << any_cascade << std::endl;

}*/

void run( std::string const & s ){

  Board const b( s );

  for( int i = 0; i < 5; ++i ){
    auto const start = std::chrono::system_clock::now();
    auto const result = recursive_search_for_cascade< 6 >( b );
    auto const end = std::chrono::system_clock::now();
    auto const elapsed = std::chrono::duration_cast<std::chrono::milliseconds>( end - start );
    std::cout << "time: " << elapsed.count() << " ms result: " << result.cascade << std::endl;
  }
}

int main(){

  run( "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000200000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000" );

  run

 run

}
