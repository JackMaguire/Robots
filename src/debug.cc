#include "robots.hh"
#include "data_reps.hh"

#include <string>
#include <sstream>
#include <iostream>
#include <vector>
#include <math.h>
#include <array>

namespace {
class DummyVisualizer {
public:
  static void show( Board const & ){}
};

std::vector< std::string >
split_by_comma( std::string const & instring ){
  std::stringstream ss( instring );
  std::vector< std::string > result;

  while( ss.good() ) {
    std::string substr;
    getline( ss, substr, ',' );
    result.push_back( substr );
  }
  return result;
}

}//anonymous namespace

using Game = RobotsGame< DummyVisualizer, false >;

int main(){
  std::string const str
  //Format:
  //BOARD,NTELEPORT,ROUND,KEY
  std::vector< std::string > tokens = split_by_comma( str );
  if( tokens.size() != 4 ){
    std::cout << "tokens.size(): " << tokens.size() << std::endl;
    //return boost::python::make_tuple( int( -1 ) );
  }

  Game game;
  game.load_from_stringified_representation(
    tokens[ 0 ],
    std::stoi( tokens[ 2 ] ),
    std::stoi( tokens[ 1 ] ),
    0 //score = 0, I guess
  );
 
  constexpr int board_input_size = 9;
  BoardInput< board_input_size > board_input( game.board() );

  LocalInput local_input( game.board() );

  KeyPress key( std::stoi( tokens[ 3 ] ) );
}
